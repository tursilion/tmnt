REM This program requires The Missing Link for TI Extended BASIC

1 OPTION BASE 1
2 DIM TL(4)
3 GOTO 5
4 C :: A$ :: K :: S :: LE :: NT :: P :: X :: Y :: T :: EP :: R :: A :: B$ :: CALL LINK :: CALL LOAD :: CALL SOUND :: CALL KEY :: CALL MAGNIFY :: CALL JOYST :: CALL COINC
5 OPEN #1:"DSK1.57FONT",VARIABLE 241,INPUT ,INTERNAL :: FOR C=33 TO 128 STEP 15 :: INPUT #1:A$ :: CALL LINK("CHAR",C,A$):: NEXT C :: CLOSE #1
6 CALL LINK("CHSIZE",5,7)
7 !@P-
20 CALL LOAD(16152,80,76,65,89,32,32,208,0)
40 CALL LINK("LOADP","DSK1.TITLE")
41 CALL LINK("DELSPR",0)
45 CALL SOUND(1,44000,30)
50 CALL LINK("PLAY")
80 CALL KEY(1,K,S):: IF S=0 THEN 80
90 CALL LINK("LOADP","DSK1.INTRO")
95 CALL LINK("PENHUE",2,1)
100 CALL LINK("WINDOW",3,10,40,136,1)
110 CALL LINK("PENHUE",2,16)
120 CALL LINK("PE"):: CALL LINK("FILL"):: CALL LINK("PD")
130 CALL LINK("PRINT",1,1,"April has been captured by Shredder! You must defeat his henchmen and save her! You can do it, my turtles!")
140 CALL KEY(1,K,S):: IF S=0 THEN 140
145 LE=1 :: TL(1)=100 :: TL(2)=100 :: TL(3)=100 :: TL(4)=100
147 NT=4
150 CALL LINK("CLEAR"):: CALL LINK("DELSPR",0)
155 CALL LINK("COLOR",2,16)
160 CALL LINK("WINDOW",50,25,100,225,1)
170 CALL MAGNIFY(1)
180 CALL LINK("PRINT",1,1,"Which turtle do you want to use?")
190 CALL LINK("PRINT",10,5,"Leonardo    -Katana Blades- "&STR$(TL(1)))
200 CALL LINK("PRINT",20,5,"Donatello   -Bo           - "&STR$(TL(2)))
210 CALL LINK("PRINT",30,5,"Raphael     -Sei          - "&STR$(TL(3)))
220 CALL LINK("PRINT",40,5,"Michelangelo-Nunchuku     - "&STR$(TL(4)))
230 CALL LINK("CHAR",1,"2040F04020")
240 CALL LINK("SPRITE",1,1,2,60,190)
250 C=2
255 P=0
256 IF TL(P+1)=0 THEN P=P+1 :: GOTO 256
260 CALL JOYST(1,X,Y)
270 P=P-SGN(Y):: IF P=-1 THEN P=3
280 IF P=4 THEN P=0
285 IF TL(P+1)=0 THEN 270
290 C=C+1 :: IF C=16 THEN C=2
300 CALL LINK("SPRITE",1,0,C,60+P*10,0)
310 CALL KEY(1,K,S):: IF K<>18 THEN 260
320 T=P+1
321 CALL LINK("DELSPR",1)
325 CALL MAGNIFY(4)
330 CALL LINK("LOADP","DSK1.BACK"&STR$(LE))
335 EP=10*LE
340 RESTORE 10000 :: READ A$ :: CALL LINK("CHAR",1,A$)
350 IF LE=1 THEN RESTORE 10024
360 IF LE=2 THEN RESTORE 10030
370 IF LE=3 THEN RESTORE 10036
380 READ A$ :: CALL LINK("CHAR",17,A$)
390 IF T=1 THEN RESTORE 10005 ELSE IF T=2 THEN RESTORE 10009 ELSE IF T=3 THEN RESTORE 10013 ELSE RESTORE 10017
400 READ A$ :: CALL LINK("CHAR",9,A$)
405 IF LE<>1 THEN IF LE=2 THEN RESTORE 10021 ELSE RESTORE 10022
406 IF LE<>1 THEN READ A$ :: CALL LINK("CHAR",25,A$)
410 CALL LINK("SPRITE",1,1,13,120,30)
420 CALL LINK("SPRITE",2,5,13,152,30)
430 CALL LINK("SPRITE",3,9,5,120,62)
440 CALL LINK("SPRITE",4,13,5,152,62)
450 CALL LINK("SPRITE",5,17,15,140,220)
460 CALL LINK("SPRITE",6,21,15,172,220)
470 CALL LINK("SPRITE",205,0,0,0,0,-5,-5)
480 CALL LINK("SPRPOS",5,R,C):: IF R>110 THEN 480
490 CALL LINK("SPRITE",205,0,0,0,0,0,0)
500 ON LE GOTO 1000,2000,3000
1000 GOSUB 4000 :: IF EP<1 THEN 6000
1005 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y)
1010 CALL LINK("DSTNCE",1,5,A):: IF A>900 THEN CALL LINK("SPRITE",205,0,0,0,0,6*SGN(R-X),8*SGN(C-Y)):: GOTO 1000
1015 CALL LINK("SPRITE",205,0,0,0,0,0,0)
1020 IF RND<.3 THEN 1000
1025 CALL LINK("FREEZE")
1030 IF RND<.6 THEN 1200
1040 RESTORE 10028 :: READ A$ :: CALL LINK("CHAR",17,A$)
1050 IF ABS(R-X)<11 AND Y-C<34 AND Y-C>0 THEN CALL SOUND(100,-1,0):: TL(T)=TL(T)-8 :: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
1055 IF ABS(R-X)<11 AND Y-C<34 AND Y-C>0 AND C>50 THEN CALL LINK("SPRITE",401,0,0,0,0,0,-25)
1060 RESTORE 10024 :: READ A$ :: CALL LINK("CHAR",17,A$):: CALL LINK("THAW"):: GOTO 1000
1200 RESTORE 10025 :: READ A$ :: CALL LINK("CHAR",17,A$)
1210 IF ABS(R-X)<11 AND Y-C<34 AND Y-C>0 THEN CALL SOUND(100,-1,0):: TL(T)=TL(T)-4 :: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
1211 IF ABS(R-X)<11 AND Y-C<34 AND Y-C>0 AND C>50 THEN CALL LINK("SPRITE",401,0,0,0,0,0,-25)
1215 RESTORE 10024 :: READ A$ :: CALL LINK("CHAR",17,A$)
1220 CALL LINK("THAW"):: GOTO 1000
2000 GOSUB 4000 :: IF EP<1 THEN 6000
2010 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y):: CALL LINK("DSTNCE",1,5,A)
2020 IF A<900 THEN 2100
2030 IF ABS(R-X)>10 THEN 2200
2040 IF RND>.6 THEN 2200
2045 CALL LINK("SPRITE",205,0,0,0,0,0,0)
2050 IF RND>.5 THEN 2300 ELSE 2400
2100 IF RND>.4 THEN 2200
2105 CALL LINK("FREEZE")
2107 CALL LINK("SPRITE",205,0,0,0,0,0,0)
2110 RESTORE 10032 :: READ A$ :: CALL LINK("CHAR",17,A$)
2115 IF ABS(R-X)<10 AND Y-C<32 AND Y-C>0 THEN CALL SOUND(100,5000,0):: TL(T)=TL(T)-9 :: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
2117 IF ABS(R-X)<10 AND Y-C<32 AND Y-C>0 THEN CALL LINK("SPRITE",401,0,0,0,0,0,-50)
2120 RESTORE 10030 :: READ A$ :: CALL LINK("CHAR",17,A$):: CALL LINK("THAW"):: GOTO 2000
2200 CALL LINK("SPRITE",205,0,0,0,0,8*SGN(R-X),10*SGN(C-Y)):: GOTO 2000
2300 CALL LINK("FREEZE"):: CALL SOUND(250,110,30,110,30,400,30,-4,0)
2310 CALL LINK("SPRITE",7,25,12,X,Y,0,-10)
2315 CALL LINK("SPRITE",8,29,12,X+32,Y,0,-10)
2320 CALL LINK("THAW")
2330 GOSUB 4000 :: IF EP<1 THEN 6000
2340 CALL LINK("SPRPOS",7,R,C):: CALL LINK("SPRPOS",1,X,Y)
2350 IF C<20 THEN CALL LINK("DELSPR",207):: GOTO 2000
2360 IF ABS(R-X)<10 AND ABS(C-Y)<30 THEN CALL LINK("DELSPR",207):: CALL SOUND(100,5000,0):: TL(T)=TL(T)-20 :: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
2365 IF ABS(R-X)<10 AND ABS(C-Y)<30 THEN 2000
2370 GOTO 2330
2400 IF ABS(R-X)>10 THEN 2200 ELSE CALL LINK("FREEZE")
2410 RESTORE 10033 :: READ A$ :: CALL LINK("CHAR",17,A$)
2420 CALL LINK("SPRITE",205,0,0,0,0,0,-20)
2430 CALL LINK("THAW")
2440 GOSUB 4000
2450 IF EP<1 THEN 6000
2460 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y)
2463 IF Y<20 THEN CALL LINK("FREEZE"):: GOTO 2490
2465 IF ABS(R-X)>10 OR Y-C>30 OR Y-C<0 THEN 2440
2470 CALL SOUND(1000,110,30,110,30,2000,30,-8,0):: CALL LINK("FREEZE")
2475 IF C<30 THEN 2490
2480 CALL LINK("SPRITE",401,0,0,0,0,0,-90)
2485 TL(T)=TL(T)-15 :: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
2490 RESTORE 10030 :: READ A$ :: CALL LINK("CHAR",17,A$)
2500 CALL LINK("THAW"):: GOTO 2000
3000 GOSUB 4000 :: IF EP<1 THEN 6000
3010 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y):: CALL LINK("DSTNCE",1,5,A)
3020 IF A<900 THEN 3100
3030 IF ABS(R-X)>10 THEN 3200
3040 IF ABS(C-Y)>50 THEN 3300 ELSE 3400
3100 CALL LINK("SPRITE",205,0,0,0,0,0,0)
3110 IF RND>.75 THEN 3000
3120 CALL LINK("FREEZE")
3130 RESTORE 10037 :: READ A$ :: CALL LINK("CHAR",17,A$)
3140 IF ABS(R-X)>10 OR Y<C+3 THEN 3160
3145 TL(T)=TL(T)-5 :: CALL SOUND(100,5000,0):: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
3150 CALL LINK("SPRITE",401,0,0,0,0,0,-20)
3160 RESTORE 10036 :: READ A$ :: CALL LINK("CHAR",17,A$)
3165 CALL LINK("THAW")
3170 GOTO 3000
3200 CALL LINK("SPRITE",205,0,0,0,0,7*SGN(R-X),9*SGN(C-Y)):: GOTO 3000
3300 IF RND>.3 THEN 3200
3305 CALL LINK("FREEZE")
3307 CALL LINK("SPRITE",205,0,0,0,0,0,0)
3310 FOR A=440 TO 880 STEP 220 :: CALL SOUND(-100,A,0):: NEXT A
3320 CALL LINK("SPRITE",7,25,2,X,Y,0,-10)
3325 CALL LINK("SPRITE",8,29,2,X+32,Y,0,-10)
3330 CALL LINK("THAW")
3340 GOSUB 4000 :: IF EP<1 THEN 6000
3350 CALL LINK("SPRPOS",7,R,C):: CALL LINK("SPRPOS",1,X,Y)
3360 IF C<20 THEN CALL LINK("DELSPR",207):: GOTO 3000
3370 IF ABS(R-X)<10 AND ABS(C-Y)<30 THEN CALL LINK("DELSPR",207):: GOTO 5000
3380 GOTO 3340
3400 IF RND>.4 THEN 3200
3410 CALL LINK("FREEZE")
3420 RESTORE 10040 :: READ A$ :: CALL LINK("CHAR",17,A$)
3430 CALL LINK("SPRITE",205,0,0,0,0,-20,-10)
3435 CALL LINK("THAW")
3440 GOSUB 4000
3445 IF EP<1 THEN 6000
3450 CALL LINK("SPRITE",205,0,0,0,0,20,-10)
3460 GOSUB 4000
3465 IF EP<1 THEN 6000
3470 CALL LINK("FREEZE")
3480 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y)
3490 CALL LINK("SPRITE",205,0,0,0,0,0,0)
3495 RESTORE 10036 :: READ A$ :: CALL LINK("CHAR",17,A$)
3500 IF ABS(R-X)<10 AND ABS(C-Y)<33 AND Y>C THEN TL(T)=TL(T)-15 ELSE CALL LINK("THAW"):: GOTO 3000
3510 CALL SOUND(100,-7,0):: IF TL(T)<1 THEN TL(T)=0 :: GOTO 5000
3520 CALL LINK("SPRITE",401,0,0,0,0,0,-20):: CALL LINK("THAW"):: GOTO 3000
4000 CALL JOYST(1,X,Y)
4010 CALL LINK("SPRPOS",1,R,C):: IF R>119 AND Y=-4 THEN Y=0
4020 IF R<96 AND Y=4 THEN Y=0
4030 IF C>220 AND X=4 THEN X=0
4040 IF C<15 AND X=-4 THEN X=0
4050 CALL LINK("SPRITE",401,0,0,0,0,-2*Y,2.5*X)
4060 CALL KEY(1,K,S):: IF S=0 THEN RETURN
4065 CALL LINK("FREEZE")
4070 IF T=1 THEN RESTORE 10005 ELSE IF T=2 THEN RESTORE 10009 ELSE IF T=3 THEN RESTORE 10013 ELSE RESTORE 10017
4080 READ A$,B$
4085 CALL SOUND(-100,-5,20)
4090 CALL LINK("CHAR",9,B$)
4100 CALL COINC(ALL,A):: IF A THEN 4200
4110 CALL LINK("CHAR",9,A$):: CALL LINK("THAW"):: RETURN
4200 CALL LINK("SPRPOS",1,R,C):: CALL LINK("SPRPOS",5,X,Y):: IF ABS(R-X)>10 THEN 4110
4201 IF Y<=C THEN 4110
4205 CALL SOUND(-100,-6,0)
4210 CALL LINK("SPRITE",205,0,2):: CALL LINK("SPRITE",205,0,15)
4215 CALL LINK("THAW")
4220 EP=EP-1 :: GOTO 4110
5000 CALL LINK("SPRITE",205,0,0,0,0,0,0)
5005 CALL LINK("FREEZE")
5006 CALL LINK("DELSPR",203)
5007 TL(T)=0
5010 FOR A=0 TO 30 :: CALL SOUND(-100,-3,A):: NEXT A
5020 RESTORE 10004 :: READ A$ :: CALL LINK("CHAR",1,A$):: CALL LINK("SPRITE",201,0,0,0,0,0,8)
5025 CALL LINK("THAW")
5030 CALL LINK("SPRPOS",1,R,C):: IF C<245 THEN 5030
5040 CALL LINK("DELSPR",201)
5050 NT=NT-1 :: IF NT>0 THEN 150
5060 FOR A=550 TO 110 STEP -5 :: CALL SOUND(-100,A,0,A+1,0,A+2,0):: NEXT A
5070 CALL LINK("WINDOW",90,90,102,151,1)
5080 CALL LINK("PE"):: CALL LINK("FILL"):: CALL LINK("PD"):: CALL LINK("PRINT",2,2,"GAME OVER")
5090 FOR A=1 TO 1000 :: NEXT A
5100 GOTO 40
6000 CALL LINK("FREEZE"):: CALL SOUND(500,-7,0):: CALL LINK("SPRITE",205,0,0,0,0,0,20)
6005 CALL LINK("SPRITE",401,0,0,0,0,0,0):: CALL LINK("THAW")
6010 CALL LINK("SPRPOS",5,R,C):: IF C<240 THEN 6010
6020 CALL LINK("DELSPR",205)
6025 CALL SOUND(1,44100,30)
6030 CALL LINK("PLAY")
6040 LE=LE+1 :: IF LE<4 THEN 150
7000 CALL LINK("DELSPR",0):: CALL LINK("LOADP","DSK1.FINAL")
7010 CALL SOUND(1,44000,30):: CALL LINK("PLAY")
7020 CALL KEY(1,K,S):: IF S=0 THEN 7020 ELSE 40
9999 !@P+
10000 DATA 370F701F1F0F07040B2D202C8CA12D8DC06020F008F0C040E0F070302C4F8CF0A12D2D0D07070E0E1C001C1C1C1C1E1FF0F0F0F0E0E070703800383838383C3E
10004 DATA 0000000000000000000000000000000000000000000000000000000000000000000000000000000F1636203B3F0060C00000000000000080C6EF2C68E0003018
10005 DATA 0101030307060E0C1C1838307060E0C000000000000000000000000000000000C000000000000000000000000000000000000000000000000000000000000000
10007 DATA 0000000000000000000000000000FFFF0000000000000000000000000000FFFEFF000000000000000000000000000000FC000000000000000000000000000000
10009 DATA 01010202040408081010202040408080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10011 DATA 00000000000000000000000000FF000000000000000000000000000000FF00000000000000000000000000000000000000000000000000000000000000000000
10013 DATA 00000000000000000214285468708000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10015 DATA 000000000000000000000000003840FE000000000000000000000000000000004038000000000000000000000000000000000000000000000000000000000000
10017 DATA 0000000000000000000C32316363C3C3000000000000000000000000000000008303000000000000000000000000000000000000000000000000000000000000
10019 DATA 00000000000606060616222202FFFA0200000000000000000080400070F000402216060606060000000000000000000040800000000000000000000000000000
10021 DATA 0000000000000000000000000000C0000000000000000000000000000000C0000000000000000000000000000000000000000000000000000000000000000000
10022 DATA 0000000000000000000000000044AA440000000000000000000000000044AA440000000000000000000000000000000000000000000000000000000000000000
10024 DATA 01010103020F0B000F0100010303031CE0B0F8F4F4F4F0F470E000F0F81818381C03030300030303030307070700070F78F8F8F800F8F8F8B8B81C1C1C001C3C
10025 DATA 0706070F0B3F2F033D0700070EF0F00F80C0E0D0D0D0C0D0C08000E0606060F00707030300030303030307070700070FF0F0F8F800F8F8F8B8B81C1C1C001C3C
10028 DATA 0000000000030200030000000101030C786C7EFDBDFDFC3DDC7800FCDC8C8C180C030383D0DFDF0F000000000000000038F8F8F800F8F8F838381C1C1C001C3C
10030 DATA 000002020300010000000000F85C0F0F081C2EBEFE3EDEFC007CFEE6C2C2020E00000000000000000101010001010103FEFE00FEFEFEEEEEEFC7C700C7C7C7CF
10032 DATA 000002020300010000000000F85C0F0F081C2EBEFE3EDEFC007CFEE6C2C20206000080F7F7F700000000000000000000FEFE00FEFEFE0E0E0F0707000707070F
10033 DATA 04070F0B0F2F9F675E3D03023E3F0000000080C0C0C0A060F0D88C0C0EFEFEFE0000000000000103070F0E001C1C3878FEFE00FEFEFEEECE8F0707000707070F
10036 DATA 000101000001010001030201131D1C03C0E0F00070707000B0C86868E868E8E80303000303030301040505050A08061EE8E808E8E8E0E0304050505020281878
10037 DATA 030707000105050003C7FAF6020703030080C000C0C0C00060D0D0D0D0D0E8E80303000303030301040505050A08061EE4E404E2E2E0E0304050505020281878
10040 DATA 0E0D0D0C0C0D0D0C0700173B53636363BF6F770717D6D606B600F4FEF5F3F3F3E3430003030102050B061C1C407060C0F3F100F0F0E0C808341A0C0F36343020
